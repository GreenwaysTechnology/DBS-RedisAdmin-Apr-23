				Redis
.....................................................................................

  
What is Redis ?
   Redis is an open source(BSD licensed)/commericial,in-memory "data structure" store.

What is Data Structure?
  organization of data.
Data structure is a pattern or policy to store,retrive,process data.

Redis stores in data at low level data structure.

Common Data structures:

1.Arrays = List
2.Set
3.Stack
4.LinkedList
5.HashTable
6.Map

What is in-memory?
 In-Memory means ram. Redis stores data in form of datastructure in Main memory(RAM).

What is store?
  Store means storage. - Data Store /Database....
Storage Types:
1.Persistent:
    Disk Store
       ->Structured 
            -DBMS / RDBMS
                -SQL - To send,read,process data from the disk.

2.In Memory
    Storing data inside RAM
    Read data from RAM
    Processing data from the ram.
    storing data in cpu register.
...................................................................................
			Redis is NoSQL data store
....................................................................................

Relational Database introductions 
Features of Relational Database.
Impedance MisMatch..
  Rise of Object oriented systems created a big gap between oo developers and databases.
  Databases uses "SQL" language where as OO always models the domain as object.
 As oo developer 
   who must have deep knowledge in databases and also sql language.
   who must write lot of boiler plate code.

Database people who thought to store data into database => "Object oriented Databases" -Object Database
In the begining , Object databases was popular later become less popular
   due to low integration support with apps
The developers who have created Frameworks to solve this problem - ORM frameworks
..................................................................................
			   Fall of Relational Database
..................................................................................

Rise of Internet
  Web apps trying connect database where we had single database instance which was ready to support "conncurrent users"

Introduction of scalablity:
  Database vendors added more database machines in order to imporve user experience and performance.
 In the begining who added more machines only which is called "vertical scability"

Relational databases was not ready for clusters


Google and Amazon their own data storage led new ideas related to data storages

=> Bigtable - google
=> Dynaamo - Amazon

What is meaning of NOSQL?

In early 2009, Johan Oskarsson organized an event to discuss “open source distributed, nonrelational databases,” during which he and a friend coined the term NoSQL (not SQL). The acronym attempted to label the emergence of an increasing number of nonrelational, distributed data stores, including open source clones of Google’s BigTable/MapReduce and Amazon’s Dynamo.

We cant give exact meaning of nosql but we can define some common characteristics

.....................................................................................

Data Models:

In SQL, data models are represented as tables(columns-rows) with relation ship using primary key-forigen key...

Types of Data Models in NoSQL:

1.key-value
2.Docoment based
3.Column based
4.Graph based -connected nodes
.....................................................................................
			 Aggregation
....................................................................................
Data aggregation summarize data from multiple sources.
It refers to the the process by which entites are coimbined to form a single meaningfull entity.
...................................................................................
			 Redis storage Model
...................................................................................

Redis is key-value store model by default.

key is identifier ,value can be a data structure..
.....................................................................................
			  Redis Common Architecture
.....................................................................................

What is redis?
  Redis is simple c program.

Program types:
1.passive program
    source code / object code which is in hard disk.
2.active program
    When the compiled program is loaded into main memory, it becomes active program.
 =>Active program is called as "Process"
 =>Every process has its own memory address
 =>Every process is managed by os.
  
=>Redis is a process which hosts datastore.
....................................................................................
				Redis setup
....................................................................................

Mode of Redis distribution:

1.OpenSource - redis.io
2.Commericial/Enterprise - redislabs -https://redis.com/

Redis platform:

=>Redis is only officially available on unix,linux,bsd versions
=>Redis is not avaibale for windows
=>Redis is available via containers like dockers
   Using docker you can spin redis inside windows.



Redis software distribution

=>source code : build from source
=>binary distribution

Install Redis from Source :Linux
..................................

Steps:
sudo apt-get update
wget https://download.redis.io/redis-stable.tar.gz
tar -xzvf redis-stable.tar.gz
cd redis-stable
make

after running make , if you get error like below

 make
Command 'make' not found, but can be installed with:
sudo apt install make        # version 4.3-4.1build1, or
sudo apt install make-guile  # version 4.3-4.1build1

..
We need to run the command
sudo apt install make
sudo apt install make-guile

...................................................................................
			  Files and folders
...................................................................................
 
src
 - source code files - .h and .c files
 - complied binary files -  redis-server...
deps
   - contains compilers for compiling redis distribution...
tests
   -contains test related files
utils
   -utility files to setup
       -cluster setup
       -hyperloglog setup
       -lru setup
     etc....

redis-conf
   This is sole of redis server which contains all the parameters and configuration.
....................................................................................
				Redis tools
....................................................................................

-Redis server
    -default host : local host
    -default port : 6379
mode:
   standalone mode - default mode
   distributed(cluster mode)

Client tools
  The clients which can be talked to redis server
 -Redis cli -redis-cli
    =>commandline tool 
	1.for operting commands to send data ,reterive data
    	2.For administration
 
 -Programming languages
   java,C#,node.js,python....

Lab:
 How to start redis server and How to communicate via redis cli?

src/redis-server

You requested maxclients of 10000 requiring at least 10032 max file descriptors

What is file Descriptor?
  It is simple c program which is used to bridge between applications and io devices

How to communicate redis server?
 redis-cli

src/redis-cli
127.0.0.1:6379> PING
PONG
127.0.0.1:6379> PING Hello Redis
(error) ERR wrong number of arguments for 'ping' command
127.0.0.1:6379> PING HelloRedis
"HelloRedis"
127.0.0.1:6379>

Redis cli /Client commmunicates Redis server via sending commands.

HTTP:
 GET-command
 GET /api/resource(identifier to execute some code)

Redis
  Command With Parameter | Without Parameter
  PING 
  PING "Hello"

Redis cli sends request(IO) to redis server, where redis receives the request(command) and execute

in C
  
  char* ping(char* args){
      return args
  }

  ping("Hello")

.....................................................................................				 Redis-client server communication protocal
.....................................................................................

RESP protocal: Redis serialization Protocal:
................................................

Redis clients uses a protocal called RESP with redis server.
RESP was designed for Redis specifically.

RESP protocal takes commands as input and send to server , server will those commands
it returns reponse.
Response would be immediate or delay(async response)
RESP can seralize different data types like int,strings,and arrays..

Server will deseralize the commands and execute them..

"hello" => "xy893"
RESP converts commands into binary format.

RESP is used only client-server (redis-cli/java/c) ----Redis Server
In cluster env(distributed env) nodes communication never happens via RESP

Network Layer:
..............
 A client connects to Redis server by creating a TCP Connection to the port 6379.
RESP works with TCP

Request - Response:
   
=>Redis clients sends commands  with different args(request),once the command is received, its processed and reply(response) is sent back to the client.

=>Redis in general sends only one command at time
=>if you want to send multiple commands at once, Redis supports "Pipelining"
=>if you use Redis as "Pub-Sub" Server,the protocal changes semantics and becomes a   push protocal,the client no longer require sending commands because the server will   automatically send new messages to the client

....................................................................................
				How to adminstre redis server
.....................................................................................

=>any configuration is needed before server setup.
   you can edit redis-conf file
=>While server is running, you can send commands(admin commands)
=>while server startup we can pass command line parameters

Server running mode:

1.log mode

src/redis-server
90:C 20 Apr 2023 18:28:49.135 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
90:C 20 Apr 2023 18:28:49.135 # Redis version=7.0.11, bits=64, commit=00000000, modified=0, pid=90, just started
90:C 20 Apr 2023 18:28:49.135 # Warning: no config file specified, using the default config. In order to specify a config file use src/redis-server /path/to/redis.conf
90:M 20 Apr 2023 18:28:49.136 # You requested maxclients of 10000 requiring at least 10032 max file descriptors.
90:M 20 Apr 2023 18:28:49.136 # Server can't set maximum open files to 10032 because of OS error: Operation not permitted.
90:M 20 Apr 2023 18:28:49.136 # Current maximum open files is 4096. maxclients has been reduced to 4064 to compensate for low ulimit. If you need higher maxclients increase 'ulimit -n'.
90:M 20 Apr 2023 18:28:49.136 * monotonic clock: POSIX clock_gettime
                _._
           _.-``__ ''-._
      _.-``    `.  `_.  ''-._           Redis 7.0.11 (00000000/0) 64 bit
  .-`` .-```.  ```\/    _.,_ ''-._
 (    '      ,       .-`  | `,    )     Running in standalone mode
 |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379
 |    `-._   `._    /     _.-'    |     PID: 90
  `-._    `-._  `-./  _.-'    _.-'
 |`-._`-._    `-.__.-'    _.-'_.-'|
 |    `-._`-._        _.-'_.-'    |           https://redis.io
  `-._    `-._`-.__.-'_.-'    _.-'
 |`-._`-._    `-.__.-'    _.-'_.-'|
 |    `-._`-._        _.-'_.-'    |
  `-._    `-._`-.__.-'_.-'    _.-'
      `-._    `-.__.-'    _.-'
          `-._        _.-'


2.
              `-.__.-'

90:M 20 Apr 2023 18:28:49.137 # Server initialized
90:M 20 Apr 2023 18:28:49.137 # WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
90:M 20 Apr 2023 18:28:49.138 * Loading RDB produced by version 7.0.11
90:M 20 Apr 2023 18:28:49.138 * RDB age 80611 seconds
90:M 20 Apr 2023 18:28:49.138 * RDB memory usage when created 0.60 Mb
90:M 20 Apr 2023 18:28:49.138 * Done loading RDB, keys loaded: 0, keys expired: 0.
90:M 20 Apr 2023 18:28:49.138 * DB loaded from disk: 0.000 seconds
90:M 20 Apr 2023 18:28:49.138 * Ready to accept connections


The default log location is standard output device
This has been mentioned in the redis-conf file

# Specify the log file name. Also the empty string can be used to force
# Redis to log on the standard output. Note that if you use standard
# output for logging but daemonize, logs will be sent to /dev/null
logfile ""

2.Back ground mode

redis-conf
	
# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
# When Redis is supervised by upstart or systemd, this parameter has no impact.
daemonize no

Editing redis-conf file and start server:
.........................................

src/redis-server  redis.conf
src/redis-cli
127.0.0.1:6379> PING
PONG
127.0.0.1:6379>

How to shutdown redis-server?

=>if it is running log  mode , you can use ctrl+c key
=>if it is running log mode or demon mode, you can shutdown via redis-cli 
  by sending "shutdown" command
....................................................................................

How to start redis server with commandline parameters?

 -port
 -daemonize

src/redis-server --daemonize yes 

How to start redis server with redis.conf and command line parameters

src/redis-server redis.conf --daemonize no

Here what ever values in the redis.conf can be overriden by command line parameters.
....................................................................................
How to change default port?

=>edit redis.conf 
port 6380
=>via commandline parameter
src/redis-server --daemonize no --port 6380


How to connect redis server via redis cli?

redis cli always connects with port 6379 and host is "localhost"
> src/redis-cli
>
if port or host is changed or updated , we need to pass parameter

>src/redis-cli -p 6380 -h myhost
....................................................................................
				Redis Stroage Structrure
...................................................................................

Relational databases stores data in the disk file.

Redis stores data in the main Memory- RAM

Redis has logic storage within redis process/instance called "redis keyspace(database)"

By default a every redis process has 16 key-space(databases), which has been defined in the redis conf file

redis.conf
# Set the number of databases. The default database is DB 0, you can select
# a different one on a per-connection basis using SELECT <dbid> where
# dbid is a number between 0 and 'databases'-1
databases 16

Even though we have 16 database ,it is not recommened to spilt data and store into different different databases.
Redis databases are not scalable in cluster env.
Databases are numbered from database-0 to 15.
Default database is 0.


Use case :How select to database and insert data into database and reterive?

 src/redis-cli -p 6380
127.0.0.1:6380> SELECT 1
OK
127.0.0.1:6380[1]> SELECT 0
OK
127.0.0.1:6380> SET id 1
OK
127.0.0.1:6380> GET id
"1"
127.0.0.1:6380> SELECT 1
OK
127.0.0.1:6380[1]> GET id
(nil)
127.0.0.1:6380[1]> SELECT 0
OK
127.0.0.1:6380> GET id
"1"
....................................................................................
			Data Models
.....................................................................................

In RDBMS data is stored in tables 
Table is collection of rows and columns

row contains data
column contains identifer

id  name        course 
1   subramanian redis

Every column is just like variable having datatypes
 varchar,number,int,boolean,....

Redis stores data(value) as key value pair.

Key-Value pair is also datastructure
 =>Dictionary | hash table | Map.

What is Key ? What can be key?

=>Key is unique inditifier to inditify value.
=>Key is binary safe string
=>Key can be "string" eg "name" or numerical value eg 1 or ""
=>Key size must be normal which should not be long or even very short
=>Key naming convention would be "user:1:pics"
   ->"object-type:id" eg user:id order:id payment:mode
=>Key also takes memeory which max size is 512 MB 

Value:
  Value is represented by datatypes.

=>Strings
=>List
=>Set
=>Sorted Set
=>Hash
=>Stream
=>HyperLogLog
=>Geospatial
=>BitMaps
=>BitFields
...................................................................................

Redis is key value pair which is used to store data. how redis is going to send data into server ,like rdbms we use sql statements - insert,select,update,remove

Redis gives us commands to deal with data.

Commands are classified according to data types and use case.

Datatypes based commands are used for development.
Other commands are used for "administration"

Data Types based commands
String:

General Syntax:
...............
SET KEY VALUE -write
GET KEY -read

SET key value [NX | XX] [GET] [EX seconds | PX milliseconds |
  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]

Set key to hold the string value.
if key already holds value,it is overriden,regardles what ever type.

set command sends req via RESP protocal to redis server , redis server now executes that commands gives response "OK"

127.0.0.1:6379> SET message "Hello"
OK


GET command:
............

GET key
 Get the value of the key.
if key present the value associated with key will be returned
if no key present, it will return response "nil"

127.0.0.1:6379> GET message
"Hello"
127.0.0.1:6379> GET name
(nil)
127.0.0.1:6379>

eg:
127.0.0.1:6379> SET name "Subramanian"
OK
127.0.0.1:6379> set city "Coimbatore"
OK
127.0.0.1:6379> set state "Tamil Nadu"
O
127.0.0.1:6379> get id
"1"
127.0.0.1:6379> get city
"Coimbatore"
127.0.0.1:6379> get state
"Tamil Nadu"

Key Naming Recommandation

object-id:unique identifier:composedObject

127.0.0.1:6379> SET user:1:comments "This is good"
OK
127.0.0.1:6379> SET user:2:comments "This very nice"
OK
127.0.0.1:6379> SET user:3:comments "This is very bad"
OK

keys are case senstive:
 "user:1" is not equal to "USER:1"
127.0.0.1:6379> SET user:1:comments "This is good"
OK
1
127.0.0.1:6379> SET USER:1:COMMENTS "this is execellent"
OK
127.0.0.1:6379> GET USER:1:COMMENTS
"this is execellent"
127.0.0.1:6379> GET user:1:comments
"This is good"

How to update key value of existing keys?

127.0.0.1:6379> SET USER:1:COMMENTS "this is most excellent"
OK
127.0.0.1:6379> GET USER:1:COMMENTS
"this is most excellent"
.....................................................................................
				How to delete Keys?
.....................................................................................

There are two ways

1.Manual deletion using "DEL" Command
  DEL command deletes one or more keys..

DEL Key key key

Response:
 integer : the number of keys removed

127.0.0.1:6379> DEL USER:1:COMMENTS
(integer) 1

UNLINK:
 => Which unlinks the key, hence the key will not exit(deleted)
 =>The memory associated with the key value is reclaimed by an "Asynchronous process"
   so unlink is non blocking"
127.0.0.1:6379> SET profile:3:name "Ram"
OK
127.0.0.1:6379> GET profile:3:name
"Ram"
127.0.0.1:6379> UNLINK profile:3:name
(integer) 1

DEL VS UNLINK:
 =>DEL is blocking command
 =>UNLINK is non blocking command



2.Auto delete : Key Expiring

SET key value [EX seconds|PX milliseconds|KEEPTTL] [NX|XX] [GET]

EX Seconds: set the expire time in seconds

127.0.0.1:6379> SET profile:1:name "Subramanian Murugan" EX 1
OK

"Subramanian Murugan"
127.0.0.1:6379> GET profile:1:name
"Subramanian Murugan"
127.0.0.1:6379> GET profile:1:name
"Subramanian Murugan"
127.0.0.1:6379> GET profile:1:name
(nil)
127.0.0.1:6379>
.....................................................................................
PX Millseconds
127.0.0.1:6379> SET profile:1:name "Subramanian Murugan" PX 5000
OK
127.0.0.1:6379> GET profile:1:name
"Subramanian Murugan"
127.0.0.1:6379> GET profile:1:name
"Subramanian Murugan"
127.0.0.1:6379> GET profile:1:name
(nil)
...................................................................................

Keys with options TTL(Time to Live):
  PX-MS 
  EX-SEC

NX AND XX :

NX : only set the key if it does not already exists -create new key and avoid update

127.0.0.1:6379> SET profile:2:name "Krishna" NX
OK
127.0.0.1:6379> SET profile:2:name "Krishna" NX
(nil)

XX: ONLY for update
127.0.0.1:6379> SET profile:2:name "Krishna" XX
OK
127.0.0.1:6379> SET profile:2:name "Krishna" XX
OK
127.0.0.1:6379> SET profile:3:name "Suman" XX
(nil)
.....................................................................................
			 How to get Complete keys?
....................................................................................

=>Keys pattern
=>scan pattern

Keys Pattern:
  =>returns all key matching pattern
 pattern style would be "glob-style"

Pattern syntax:
* => Get all the keys
127.0.0.1:6379> KEYS *
1) "user:3:comments"
2) "user:1:comments"
3) "message"
4) "user:2:comments"
5) "id"
6) "city"
7) "state"
8) "profile:2:name"
9) "name"

h?llo => matches hello,hallo and hxello
127.0.0.1:6379> Keys  m?essage
(empty array)
127.0.0.1:6379> Keys  m?ssage
1) "message"
127.0.0.1:6379> Keys  u?er
(empty array)
127.0.0.1:6379> Keys  u?er:1:comments
1) "user:1:comments"
127.0.0.1:6379> Keys  m??sage
1) "message"
127.0.0.1:6379> Keys  m????
(empty array)
127.0.0.1:6379> Keys  m??
(empty array)
127.0.0.1:6379> Keys  m?
(empty array)
127.0.0.1:6379> Keys  ??
1) "id"
127.0.0.1:6379> Keys  ????
1) "city"
2) "name"
127.0.0.1:6379>

h*ello => matches hllo and heeeeello
h[ae] => matches hello and hallo but not hillo
h[^e]=>matches hallo,hbllo,but not hello
h[a-b] =>matches hallo and hbllo
..................................................................................
scan command used to query keys async ways with pattern

scan iterates the set of keys in the currently redis database

Scan vs Keys:
 Scan is non blocking/async 
 Keys are blocking command
 Keys command not recommended for administration or even develop with large sets

eg:
SCAN cursor [MATCH pattern] [Count count] [Type type]

SCAN is cursor based iterator.
SCAN command for every call the server returns an updated cursor..




















